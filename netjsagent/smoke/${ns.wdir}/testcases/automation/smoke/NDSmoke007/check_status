#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

#RUBY_GET_LATEST_FILE_PROG="/usr/bin/get_latest_file.rb" 
TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"                           
SUMMARY_TOP_FILE="$TEST_RUN_PATH/summary.top"            
TEST_RUN_GDF_FILE=$(${RUBY_GET_LATEST_FILE_PROG} -d ${PARTITION_PATH} -p 'testrun.gdf*')       
MONITOR_LOG_FILE="${PARTITION_PATH}/monitor.log"                                               
NDC_TRACE_LOG_FILE="${PARTITION_PATH}/nd/logs/ndc_trace.log"                                   
SUMMARY_GDF_FILE="${NS_WDIR}/logs/TR$(get_test_idx)/summary_gdf.data"                          
AGG_DATA_FILE="${PARTITION_PATH}/nd/raw_data/agg_data_NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_test_name) in
    "NETJS-007-001") handle_netjs_007_001_case ;;
    "NETJS-007-002") handle_netjs_007_002_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}
function handle_netjs_007_001_case() {
    local rc
    local NodeJSEntryMethodCount                                                                                   
    rc=-1                                                                                      
    NodeJSEntryMethodCount=-1
    init_line=$(grep -n "cm_nd_method_stats.gdf:" $MONITOR_LOG_FILE  | grep cm_init_monitor | cut -d : -f 1)
    head -$((${init_line}+1)) $MONITOR_LOG_FILE | tail -1 | grep "successfull" >/dev/null 2>&1 
    rc=$?                                                                                      
                                                                                               
    if [ $rc -gt 0 ]; then                                                                     
        log_status_int "FAIL" "Failed for ND Method Monitor as List. Method monitor list is not available in monitor.log"
    fi                                                                                         
                                                                                               
    grep "nd_nd_method_mon_req_ex" ${NDC_TRACE_LOG_FILE}|grep "Accepting new connection" >/dev/null 2>&1
    rc=$?                                                                                      
                                                                                               
    if [ $rc -gt 0 ]; then                                                                     
        log_status_int "FAIL" "Failed for NDMethodMonAsList. Method monitor list is not available in nd_trace.log file"
    fi
    NodeJSEntryMethodCount=$(                                                                      
        grep "ND Method Stats(NodeJS>CAV-QA-30-28>cav-nsecom-01>HTTP_parserOnIncoming)" $SUMMARY_GDF_FILE | cut -d '|' -f6
    )                                                                                          
    NodeJSEntryMethodCount=$(intValue ${NodeJSEntryMethodCount})                                       
                                                                                               
    debug "NodeJSEntryMethodCount=${NodeJSEntryMethodCount}"                                           
    if [ $NodeJSEntryMethodCount -lt 1 ]; then                                                   
        log_status_int "FAIL" "Failed for NDMethodMonAsList. NodeJS EntryMethodCount is too low"  
    fi                                                                                         
                                                                                               
    log_status_int "PASS" "Passed  NDMethodMonAsList for NodeJS"                
}
function handle_netjs_007_002_case() {
  local methodmonrecord=$(grep -c "^61," ${AGG_DATA_FILE})
  if [ $methodmonrecord -lt 10 ];then
     log_status_int "FAIL" "Failed for NDMethodMonAsList. MethodMonitorRecord 61 in agg_data is too low"
  else
    log_status_int "PASS" "Passed for NDMethodMonAsList. MethodMonitorRecord 61 in agg_data detected"
  fi
}
main
