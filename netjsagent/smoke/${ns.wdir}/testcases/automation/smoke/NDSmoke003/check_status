#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"                           
HOTSPOT_THREAD_FILE="${PARTITION_PATH}/nd/csv/NDAutoSensorHotSpotThreads.csv"      
SUMMARY_TOP_FILE="$TEST_RUN_PATH/summary.top"            

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_test_name) in
    "NETJS-003-001") handle_netjs_003_001_case ;;
    "NETJS-003-002") handle_netjs_003_002_case ;;
    "NETJS-003-003") handle_netjs_003_003_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}

function handle_netjs_003_001_case() {
 hotspot_thread_name=$(grep "Event Dispatch Thread" $HOTSPOT_THREAD_FILE)
 hotspot_thread_state=$(grep "Running" $HOTSPOT_THREAD_FILE)
 hotspot_thread_id=$(cut -d ',' -f4 ${HOTSPOT_THREAD_FILE} | head -1 )
 if [ ! -s $HOTSPOT_THREAD_FILE ]; then                                                      
    log_status_int "FAIL" "Autosensor  hotspot file is not present in testrun or might have 0 data"
 fi
 if [ -z  == "${hotspot_thread_name}" ];then
    log_status_int "FAIL" "Actual thread name not  detected; Actual thread name should ${hotspot_thread_name}"
 fi
 if [ -z "${hotspot_thread_state}" ];then
    log_status_int "FAIL" "Actual thread state not  detected; Actual thread state should ${hotspot_thread_state}"
 fi
 if [  -z "${hotspot_thread_id}" ];then
    log_status_int "FAIL" "Thread id should not different in Nodejs  ${hotspot_thread_id}"
 fi
  
 log_status_int "PASS" "Hotspot data is coming with keyword enableHSLongStack=0 along with used keyword ASSampleInterval and ASThresholdMatchCount"
}
function handle_netjs_003_002_case() {
 hotspot_thread_name=$(grep "Event Dispatch Thread" $HOTSPOT_THREAD_FILE)
 hotspot_thread_state=$(grep "Running" $HOTSPOT_THREAD_FILE)
 hotspot_thread_id=$(cut -d ',' -f4 ${HOTSPOT_THREAD_FILE} | head -1 )
 if  [ ! -s $HOTSPOT_THREAD_FILE ]; then                                                      
    log_status_int "FAIL" "Autosensor  hotspot file is not present in testrun or might have 0 data"
 fi
 if [ -z  == "${hotspot_thread_name}" ];then
    log_status_int "FAIL" "Actual thread name not  detected; Actual thread name should ${hotspot_thread_name}"
 fi
 if [ -z "${hotspot_thread_state}" ];then
    log_status_int "FAIL" "Actual thread state not  detected; Actual thread state should ${hotspot_thread_state}"
 fi
 if [  -z "${hotspot_thread_id}" ];then
    log_status_int "FAIL" "Thread id should not different in Nodejs  ${hotspot_thread_id}"
 fi
  
 log_status_int "PASS" "Hotspot data is coming with keyword enableHSLongStack=1 along with used keyword ASSampleInterval and ASThresholdMatchCount"
}


function handle_netjs_003_003_case() {
  hotspot_thread_name=$(grep "Event Dispatch Thread" $HOTSPOT_THREAD_FILE)
 hotspot_thread_state=$(grep "Running" $HOTSPOT_THREAD_FILE)
 hotspot_thread_id=$(cut -d ',' -f4 ${HOTSPOT_THREAD_FILE} | head -1 )
 if  [ ! -s $HOTSPOT_THREAD_FILE ]; then                                                      
    log_status_int "FAIL" "Autosensor  hotspot file is not present in testrun or might have 0 data"
 fi
 if [ -z  == "${hotspot_thread_name}" ];then
    log_status_int "FAIL" "Actual thread name not  detected; Actual thread name should ${hotspot_thread_name}"
 fi
 if [ -z "${hotspot_thread_state}" ];then
    log_status_int "FAIL" "Actual thread state not  detected; Actual thread state should ${hotspot_thread_state}"
 fi
 if [  -z "${hotspot_thread_id}" ];then
    log_status_int "FAIL" "Thread id should not different in Nodejs  ${hotspot_thread_id}"
 fi
  
 log_status_int "PASS" "Hotspot data is coming with keyword enableHSLongStack=2 along with used keyword ASSampleInterval and ASThresholdMatchCount"
}
main
