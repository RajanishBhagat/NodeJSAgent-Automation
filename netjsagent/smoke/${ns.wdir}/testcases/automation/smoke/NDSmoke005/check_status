#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"                           
SUMMARY_TOP_FILE="$TEST_RUN_PATH/summary.top"            

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_test_name) in
    "NETJS-005-001") handle_netjs_005_001_case ;;
    "NETJS-005-002") handle_netjs_005_002_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}

function handle_netjs_005_001_case() {
    eventId12Count=$(grep -c "^12," $RAW_DATA_FILE)                                            
    eventId4Count=$(grep -c ^4, $RAW_DATA_FILE)                                            
    eventId2Count=$(grep -c ^2, $RAW_DATA_FILE)                                            
    if [ $eventId12Count -gt 0 ]; then                                                         
        debug "eventId12Count=$eventId12Count, eventId4Count=$eventId4Count, eventId2Count=$eventId2Count"
        if [ $eventId12Count -eq $eventId4Count ] && \                                         
           [ $eventId12Count -eq $eventId2Count ] && \                                         
           [ $eventId2Count  -eq $eventId4Count ] ; then                                       
          log_status_int "PASS" "Passed for captureHTTPReqFullFp=3; eventId12Count=$eventId12Count; eventId4Count=$eventId4Count; eventId2Count=$eventId2Count"
        fi                                                                                     
        error "Failed for captureHTTPReqFullFp=3; eventId12Count=$eventId12Count"              
        log_status_int "FAIL" "Failed for captureHTTPReqFullFp=3; eventId12Count=$eventId12Count"
    fi                       
}
function handle_netjs_005_002_case() {
    eventId13Count=$(grep -c "^13," $RAW_DATA_FILE)                                       
    eventId4Count=$(grep -c ^4, $RAW_DATA_FILE)
    eventId2Count=$(grep -c ^2, $RAW_DATA_FILE)                    
    if [ $eventId13Count -gt 0 ]; then
        debug "eventId13Count=$eventId13Count, eventId4Count=$eventId4Count, eventId2Count=$eventId2Count"
        if [ $eventId13Count -eq $eventId4Count ] && \ 
           [ $eventId13Count -eq $eventId2Count ] && \ 
           [ $eventId2Count  -eq $eventId4Count ] ; then
          log_status_int "PASS" "Passed for captureHTTPRespFullFp=2; eventId13Count=$eventId13Count; eventId4Count=$eventId4Count; eventId2Count=$eventId2Count"
        fi                                                    
        error "Failed for captureHTTPRespFullFp=2; eventId13Count=$eventId13Count"
        log_status_int "FAIL" "Failed for captureHTTPRespFullFp=2; eventId13Count=$eventId13Count"
    fi                       
}
main
