#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"                           
SUMMARY_TOP_FILE="$TEST_RUN_PATH/summary.top"            

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_test_name) in
    "NETJS-001-001") handle_netjs_001_001_case ;;
    "NETJS-001-002") handle_netjs_001_002_case ;;
    "NETJS-001-003") handle_netjs_001_003_case ;;
    "NETJS-001-004") handle_netjs_001_004_case ;;
    "NETJS-001-005") handle_netjs_001_005_case ;;
    "NETJS-001-006") handle_netjs_001_006_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}

# Flowpath vaildation for bci%=0

function handle_netjs_001_001_case() {
    local eventId2=$(grep -c "^2," $RAW_DATA_FILE)                                                   
    local eventId4=$(grep -c "^4," $RAW_DATA_FILE)                                                   
    local eventId5=$(grep -c "^5," $RAW_DATA_FILE)                                                   
    local eventId99=$(grep -c "^99," $RAW_DATA_FILE)                                                   
    local eventId11=$(grep -c "^11," $RAW_DATA_FILE)                                                   
     
    if [ ! -e $RAW_DATA_FILE ];then
       log_status_int "FAIL" "Rawdata file does not exist: ${RAW_DATA_FILE}" 
    fi
                                                                                               
    if [ ! -s $RAW_DATA_FILE ];then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}" 
    fi
    
    if [ $eventId5 -lt 1 ];then
       log_status_int "FAIL" "MetaData Event id 5 not detected: ${eventId5}"
    fi 

    if [ $eventId99 -lt 1 ];then
       log_status_int "FAIL" "Event id 99 not detected: ${eventId99}"
    fi 
    if [ $eventId99 -gt 1 ];then
       log_status_int "FAIL" "Event id 99 detected more then once: ${eventId99}"
    fi 
    if [ $eventId11 -lt 1 ];then
       log_status_int "FAIL" "Event id 11 not detected: ${eventId11}"
    fi 
    if [ $eventId11 -gt 1 ];then
       log_status_int "FAIL" "Event id 11 detected more then once: ${eventId11}"
    fi 
    debug "eventId2=$eventId2, eventId4=$eventId4"                                             
    if [ $eventId2 -gt 0 ] || [ eventId4 -gt 0 ];then                                                        
        log_status_int "FAIL" "Event id 2 and 4 records is detected for bci%=0. Number of flowpaths: ${eventId4}"
    fi
   
    log_status_int "PASS" "Flowpath validation pass for bci% 0"

}

# Flowpath validation for bci%=50

function handle_netjs_001_002_case() {
    local eventId2=$(grep -c "^2," $RAW_DATA_FILE)
    local eventId4=$(grep -c "^4," $RAW_DATA_FILE)
    local eventId5=$(grep -c "^5," $RAW_DATA_FILE)
    local eventId99=$(grep -c "^99," $RAW_DATA_FILE)
    local eventId11=$(grep -c "^11," $RAW_DATA_FILE)

    if [ ! -e $RAW_DATA_FILE ];then
       log_status_int "FAIL" "Rawdata file does not exist: ${RAW_DATA_FILE}"
    fi

    if [ ! -s $RAW_DATA_FILE ];then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
    fi

    if [ $eventId5 -lt 1 ];then
       log_status_int "FAIL" "MetaData Event id 5 not detected: ${eventId5}"
    fi

    if [ $eventId99 -lt 1 ];then
       log_status_int "FAIL" "Event id 99 not detected: ${eventId99}"
    fi
    if [ $eventId99 -gt 1 ];then
       log_status_int "FAIL" "Event id 99 detected more then once: ${eventId99}"
    fi
    if [ $eventId11 -lt 1 ];then
       log_status_int "FAIL" "Event id 11 not detected: ${eventId11}"
    fi
    if [ $eventId11 -gt 1 ];then
       log_status_int "FAIL" "Event id 11 detected more then once: ${eventId11}"
    fi
    
    debug "eventId2=$eventId2, eventId4=$eventId4"
    if [ $eventId2 -lt 20 ] && [ $eventId2 -gt 40 ];then                                                     
        log_status_int "FAIL" "EventsID 2 and 4 are not detected for bci% 50. Number of flowpaths: ${eventId4}"
    fi
    
    if [ $eventId2 -ne $eventId4 ];then                                                        
        log_status_int "FAIL" "EventsID 2 and 4 are not equal for bci% 50. Number of flowpaths: ${eventId4}"
    fi    

    btTag=$(grep "^4," $RAW_DATA_FILE | sort --random-sort|tail -1 | cut -d, -f4)          
    debug "btTag=$btTag"                                                                   
    if [ $btTag -lt 10 ] && [ $btTag -gt 13 ]; then
         log_status_int "FAIL" "Unknown BT category detected for bci% 50"
    fi
    cputime=$(grep "^4," $RAW_DATA_FILE | sort --random-sort|tail -1 | cut -d, -f5)
    debug "cputime=$cputime"

    if [ "XX$cputime" != "XX-" ];then
        log_status_int "FAIL" "5th filed not detected appropiate for Eventid 4 with bci% 50"
    fi

    log_status_int "PASS" "Flowpath validation pass for bci% 50"

}

# Flowpath validation for bci%=100

function handle_netjs_001_003_case() {
    local eventId2=$(grep -c "^2," $RAW_DATA_FILE)
    local eventId4=$(grep -c "^4," $RAW_DATA_FILE)
    local eventId5=$(grep -c "^5," $RAW_DATA_FILE)
    local eventId99=$(grep -c "^99," $RAW_DATA_FILE)
    local eventId11=$(grep -c "^11," $RAW_DATA_FILE)

    if [ ! -e $RAW_DATA_FILE ];then
       log_status_int "FAIL" "Rawdata file does not exist: ${RAW_DATA_FILE}"
    fi

    if [ ! -s $RAW_DATA_FILE ];then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
    fi

    if [ $eventId5 -lt 1 ];then
       log_status_int "FAIL" "MetaData Event id 5 not detected: ${RAW_DATA_FILE}"
    fi

    if [ $eventId99 -lt 1 ];then
       log_status_int "FAIL" "Event id 99 not detected: ${RAW_DATA_FILE}"
    fi
    if [ $eventId99 -gt 1 ];then
       log_status_int "FAIL" "Event id 99 detected more then once: ${RAW_DATA_FILE}"
    fi
    if [ $eventId11 -lt 1 ];then
       log_status_int "FAIL" "Event id 11 not detected: ${RAW_DATA_FILE}"
    fi
    if [ $eventId11 -gt 1 ];then
       log_status_int "FAIL" "Event id 11 detected more then once: ${RAW_DATA_FILE}"
    fi

    debug "eventId2=$eventId2, eventId4=$eventId4"
    if [ $eventId2 -lt 1 ] && [ $eventId4 -lt 1 ];then
       log_status_int "FAIL" "No Flowpath detected for bci% 100"
    fi
    if [ $eventId2 -ne $eventId4 ];then
          log_status_int "FAIL" "Event ID 2 and 4 are not same for bci% 100. Number of flowpaths: ${eventId4}"
    fi
      
   btTag=$(grep "^4," $RAW_DATA_FILE | sort --random-sort|tail -1 | cut -d, -f4)
   debug "btTag=$btTag"

    if [ $btTag -lt 10 ] && [ $btTag -gt 13 ]; then
         log_status_int "FAIL" "Unknown BT category detected for bci% 100"
    fi   
    
   cputime=$(grep "^4," $RAW_DATA_FILE | sort --random-sort|tail -1 | cut -d, -f5)
   debug "cputime=$cputime"
   if [ "XX$cputime" != "XX-" ];then
        log_status_int "FAIL" "5th filed not detected appropiate for Eventid 4 with bci% 50"
   fi

  log_status_int "PASS" "Flowpath validation pass for bci% 100"
 
}

# Status code validation with flowpath

function handle_netjs_001_004_case() {

    local eventId2=                                                                             
    local eventId4=                                                                             
    local statusCodeRange=                                                                      
                                                                                               
    eventId2=$(grep -c "^2," $RAW_DATA_FILE)                                                   
    eventId4=$(grep -c "^4," $RAW_DATA_FILE)                                                   
    debug "eventId2=$eventId2, eventId4=$eventId4"                                             
                                                                                               
    statusCodeRange=$(grep "^4," $RAW_DATA_FILE | cut -d, -f3)                                 
    debug "[$($statusCodeRange | xargs)]"                                                      
                                                                                               
    for code in $statusCodeRange; do                                                           
        flag=0                                                                                 
        case $code in                                                                          
            200);;                                                                             
            302);;       
            403);;                                                                      
            500);;                                                                             
            501);;                                                                             
            502);;                                                                             
              0)flag=1;;                                                                       
              *)flag=1;;                                                                       
              ?)flag=1;;                                                                       
        esac                                                                                   
        if [ $flag -eq 1 ]; then                                                               
            debug "code=$code, flag=$flag"                                                     
            log_status_int "FAIL" "Unknown status code $code found"                            
            break                                                                              
        fi                                                                                     
    done          

    log_status_int "PASS" "Business transaction status code within expected range"         
}

# checking for timestamp validations
function handle_netjs_001_005_case() {
  configType=$(grep ^CONFIG /etc/cav.conf |cut -d ' ' -f2)                                   
    # Log failure and return                                                                   
    # NOTE: We are already setting config type before starting of a test                       
    # so this case should work                                                                 
    if [ "X$configType" != "XNDE" ]; then                                                      
        log_status_int "FAIL" "Config type is not NDE. Not checking for timestamp validations" 
    fi                                                                                         
                                                                                               
    local timeStampTest                                                                        
    local absTimeStampTest                                                                     
    local bciTimeStamp                                                                         
    local absTimeInSecs                                                                        
                                                                                               
    timeStampTest=$(cat $SUMMARY_TOP_FILE | cut -d '|' -f3)                                    
    absTimeStampTest=$(date -d"$timeStampTest" +%s)                                            
                                                                                               
    bciTimeStamp=$(grep '^11,' $RAW_DATA_FILE | cut -d, -f2)                                   
    length=${#bciTimeStamp}                                                                    
    offset=$((length - 3))                                                                     
                                                                                               
    bciTimeStamp=${bciTimeStamp:0:$offset}                                                     
    absTimeInSecs=$((1388534400 + bciTimeStamp))                                               
                                                                                               
    diff=$((absTimeStampTest - absTimeInSecs))                                                 
    # Returning  absolute value. Replacing leading '-' if any                                  
    diff=${diff/-/}                        
 debug "absTimeStampTest=$absTimeStampTest, bciTimeStamp=$bciTimeStamp, absTimeInSecs=$absTimeInSecs, diff=$diff"
                                                                                               
    if [ $diff -ge 60 ];then                                                                   
        log_status_int "FAIL" "BCI start time($bciTimeStamp) is greater than expected test start time($absTimeInSecs)"
    else                                                                                       
        log_status_int "PASS" "BCI start time is as per the cavepoch 1388534400; NS start time = $absTimeStampTest; BCI start time=$absTimeInSecs"
    fi    
}

function handle_netjs_001_006_case() {
  local  eventId2=$(grep -c "^2," $RAW_DATA_FILE)                                                   
  local  eventId4=$(grep -c "^4," $RAW_DATA_FILE)                                                   
  local  sequenceBlob=$(grep "^4," $RAW_DATA_FILE | sort --random-sort|tail -1 | cut -d, -f7)       
                                                                                               
    if [ $eventId2 -ne $eventId4 ]; then                                                       
        log_status_int "FAIL" "Event id 2/4 detected are not equal"
    fi                                                                                         
                                                                                               
    [ -z $sequenceBlob ] && log_status_int "FAIL" "Sequence blob not found for bciPct=100"
                                                                                               
    entryMethodId=$(echo $sequenceBlob | cut -d '_' -f1)                                       
    actualEntryPoint=$(grep "^5,.*.,$entryMethodId$" $RAW_DATA_FILE | cut -d, -f2)             
                                                                                               
    debug "eventId2=$eventId2, eventId4=$eventId4, sequenceBlob=$sequenceBlob, entryMethodId=$entryMethodId, actualEntryPoint=$actualEntryPoint"
                                                                                               
    expectedEntryPoint="nsecom._http_server.HTTPParser_parserOnIncoming(IncomingMessage;ServerResponse;)"
                                                                                               
    if [ ${actualEntryPoint} == ${expectedEntryPoint} ];then                                   
        log_status_int "PASS" "Entrypoint match. Expected entry point(HTTPParser_parserOnIncoming); found($actualEntryPoint)"       
    else                                                                                       
        log_status_int "FAIL" "Entrypoint mismatch. Expected entry point(HTTPParser_parserOnIncoming); found($actualEntryPoint)"
    fi                    
}

main
