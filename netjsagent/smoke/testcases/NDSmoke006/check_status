#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"                           
SUMMARY_TOP_FILE="$TEST_RUN_PATH/summary.top"            

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_test_name) in
    "NETJS-006-001") handle_netjs_006_001_case ;;
    "NETJS-006-002") handle_netjs_006_002_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}
function handle_netjs_006_001_case() {
   local url_filed=$(grep  "^2," $RAW_DATA_FILE|head -1 | cut -d ',' -f7 )                                           
   local correlation_filed=$(grep  "^2," $RAW_DATA_FILE|head -1 | cut -d ',' -f8 )
   debug "url_filed: $url_filed and correlation_filed: $correlation_filed"
   if [[ $(echo $url_filed | grep "^/nsecom") ]];then
      if [[ $(echo $correlation_filed | grep "^Nsecomm-CID-") ]] || [[ $(echo $correlation_filed | grep "^{corrID}") ]]; then 
         log_status_int "PASS" "URL Name and CorrelationID detected with eventID 2"
      fi   
       log_status_int "FAIL" "Only URL Name is detected and CorrelationID is not detected"
   fi
   log_status_int "FAIL" "2 record is not detected"  
}
function handle_netjs_006_002_case() {
    local threadID=$(grep  "^2," $RAW_DATA_FILE|head -1 | cut -d ',' -f4)
    local threadseq=$(grep  "^2," $RAW_DATA_FILE|head -1 | cut -d ',' -f5)
    if [ ! -z ${threadID} ];then
      if [ ! -z ${threadseq} ];then
      log_status_int "PASS" "ThreadID and ThreadSeq is detected with 2 records threadID is ${threadID} and threadseq is ${threadseq}"
      fi 
      log_status_int "FAIL" "Only Thread ID is detetected ${threadID} but threadseq is not detected with 2 record"
    fi
   log_status_int "FAIL" "2 record is not detected"
}
main
