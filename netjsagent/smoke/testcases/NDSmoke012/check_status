#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_CAV-QA-30-28_cav-nsecom-01.txt"                           
gdf_file="$(ls $NS_WDIR/logs/TR$(get_test_idx)/$(get_test_partition)/testrun.gdf* | tail -1)"  
exception_csv_file="$NS_WDIR/logs/TR$(get_test_idx)/$(get_test_partition)/nd/csv/NodeJS_CAV-QA-30-28_cav-nsecom-01/NDExceptions.csv"           
summary_file="$(ls $NS_WDIR/logs/TR$(get_test_idx)/summary_gdf.data )"                         

function main() {
	case $(get_test_name) in
    "NETJS-012-001") handle_netjs_012_001_case ;;
    "NETJS-012-002") handle_netjs_012_002_case ;;
    "NETJS-012-003") handle_netjs_012_003_case ;;
    "NETJS-012-004") handle_netjs_012_004_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}
function handle_netjs_012_001_case() {
    if [ ! -s $RAW_DATA_FILE ]; then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
    fi
    local fpid2=$(grep "^2," ${RAW_DATA_FILE} |grep "/nsecomm/net" |cut -d ',' -f 2 |head -1)
    local exceprecord=$(grep -c "^38,$fpid2," $RAW_DATA_FILE)
    if [ $exceprecord -ne  1 ]; then
       log_status_int "FAIL" "Exception Record is not captured"
    fi
       log_status_int "PASS" "Exception Record is captured"
}

function handle_netjs_012_002_case() {
    if [ ! -s $RAW_DATA_FILE ]; then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
    fi
    local mtMID=$(grep "^5,routes.net.multiHttpConnection(IncomingMessage;ServerResponse;);20" $RAW_DATA_FILE )
    local fpid2=$(grep "^2," ${RAW_DATA_FILE} |grep "/nsecomm/net" |cut -d ',' -f 2 |head -1)
    local exceprecord=$(grep "^38,$fpid2," $RAW_DATA_FILE | cut -d ',' -f11 )
    if [ -z $mtMID ]; then
       log_status_int "FAIL" "Exception is not captured"
    fi
    if [ $exceprecord -ne 20]; then
       log_status_int "FAIL" "Exception is not captured"
    fi   
    log_status_int "PASS" "Exception generated on routes.net.multiHttpConnection() method"
}
function handle_netjs_012_003_case() {
    if [ ! -s $RAW_DATA_FILE ]; then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
    fi
    if [ ! -s $exception_csv_file ]; then
       log_status_int "FAIL" "exception csv having zero size: ${exception_csv_file}"
    fi
    log_status_int "PASS" "${exception_csv_file} having exception data"
}
function handle_netjs_012_004_case() {
    if [ ! -s $RAW_DATA_FILE ]; then
       log_status_int "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
    fi
    local rec32=$(grep "^32," $RAW_DATA_FILE)
    local rec33=$(grep "^33," $RAW_DATA_FILE)
    local rec34=$(grep "^34," $RAW_DATA_FILE)
    local rec35=$(grep "^35," $RAW_DATA_FILE)
   
    if [ -z $rec32 ] && [ -z $rec33 ] && [ -z $rec34 ] && [ -z $rec35 ]; then
     log_status_int "FAIL" "Exception record 32 33 34 35 is not detected "
    fi   
    log_status_int "PASS" "Exception record 32; 33; 34 and 35  is detected"
}

main
